name: Weekly Timelapse Release

on:
  schedule:
    - cron: '30 00 * * MON'  # Every Monday 00:30 UTC (~07:30 WIB)
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  weekly:
    runs-on: ubuntu-latest
    env:
      CRF: '18'
      PRESET: 'slow'
      PIX_FMT: 'yuv420p'
      DOWNSCALE_FACTOR: '2'
      SOURCE_REPO: 'ayamkv/wplace-surabaya'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -r requirements.txt
          ffmpeg -version || sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Generate last 7 days
        id: gen
        shell: bash
        run: |
          set -e
          . .venv/bin/activate
          rm -f list.txt weekly_files.txt
          # Build timelapse for each of the previous 7 days (1=Yesterday .. 7 days ago) using UTC+7 offset
          for i in $(seq 1 7); do
            DATE=$(date -u -d "$i day ago +7 hours" +%Y%m%d)
            echo "=== Processing $DATE ==="
            if [ ! -d "output/$DATE" ]; then
              echo "Fetching output/$DATE from ${SOURCE_REPO}"
              rm -rf tmp_src
              git clone --filter=blob:none --no-checkout https://github.com/${SOURCE_REPO}.git tmp_src
              cd tmp_src
              git sparse-checkout init --cone
              git sparse-checkout set output/$DATE || true
              git checkout main || git checkout master || true
              cd ..
              if [ -d "tmp_src/output/$DATE" ]; then
                mkdir -p output
                rm -rf "output/$DATE"
                cp -r "tmp_src/output/$DATE" "output/$DATE"
                echo "Fetched $DATE"
              else
                echo "No data for $DATE in source repo"
              fi
              rm -rf tmp_src
            else
              echo "Already have output/$DATE"
            fi
            if [ -d "output/$DATE" ]; then
              echo "Building timelapse for $DATE"
              python create_timelapse.py --date "$DATE" || true
            else
              echo "Skipping timelapse build for $DATE (no images)"
            fi
          done
          # Gather up to 7 most recent daily mp4s (could be fewer if missing days)
          ls timelapse/timelapse_*.mp4 2>/dev/null | sort | tail -n 7 > weekly_files.txt || true
          COUNT=$(wc -l < weekly_files.txt || echo 0)
          if [ "$COUNT" -eq 0 ]; then
            echo "No timelapse files present; skipping release.";
            echo "made=0" >> $GITHUB_OUTPUT;
            exit 0;
          fi
          > list.txt
          while read -r F; do echo "file '$F'" >> list.txt; done < weekly_files.txt
          echo "Combining $COUNT day(s)."
          if [ -s list.txt ]; then
            ffmpeg -y -f concat -safe 0 -i list.txt -c copy timelapse/weekly_concat.mp4 \
              || ffmpeg -y -f concat -safe 0 -i list.txt -c:v libx264 -crf ${CRF} -preset ${PRESET} -pix_fmt ${PIX_FMT} timelapse/weekly_concat.mp4
          fi
          if [ -f timelapse/weekly_concat.mp4 ]; then
            echo "made=1" >> $GITHUB_OUTPUT
            echo "count=$COUNT" >> $GITHUB_OUTPUT
            if [ "$COUNT" -eq 7 ]; then
              echo "tag=weekly-${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT
              echo "rname=Weekly Timelapse (Run ${GITHUB_RUN_NUMBER})" >> $GITHUB_OUTPUT
            else
              echo "tag=partial-${COUNT}-of-7-${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT
              echo "rname=Partial Timelapse (${COUNT}/7 days, Run ${GITHUB_RUN_NUMBER})" >> $GITHUB_OUTPUT
            fi
          else
            echo "made=0" >> $GITHUB_OUTPUT
          fi

      - name: Create weekly/partial release
        if: steps.gen.outputs.made == '1'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.gen.outputs.tag }}
          name: ${{ steps.gen.outputs.rname }}
          files: |
            timelapse/weekly_concat.mp4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
