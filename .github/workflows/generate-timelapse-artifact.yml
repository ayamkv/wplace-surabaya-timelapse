name: Generate timelapse artifact

on:
  workflow_dispatch:
    inputs:
      date:
        description: 'Date in YYYYMMDD (Surabaya UTC+7). Leave empty for yesterday.'
        required: false
        type: string

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure ffmpeg present
        run: |
          ffmpeg -version || sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Compute target date (Surabaya)
        id: dates
        shell: bash
        env:
          REQUESTED_DATE: ${{ github.event.inputs.date }}
        run: |
          python - << 'PY'
          from datetime import datetime, timedelta, timezone
          import os
          val = (os.environ.get('REQUESTED_DATE') or '').strip()
          tz = timezone(timedelta(hours=7))
          def is_valid(s: str) -> bool:
              if len(s) != 8 or not s.isdigit():
                  return False
              try:
                  datetime.strptime(s, '%Y%m%d')
                  return True
              except Exception:
                  return False
          if is_valid(val):
              target = val
          else:
              y = datetime.now(tz) - timedelta(days=1)
              target = y.strftime('%Y%m%d')
          out = f"date={target}\n"
          with open(os.environ['GITHUB_OUTPUT'], 'w', encoding='utf-8') as f:
              f.write(out)
          PY

      - name: Restore dumps cache
        id: dumps-cache
        uses: actions/cache@v4
        with:
          path: output/${{ steps.dates.outputs.date }}
          key: dumps-${{ steps.dates.outputs.date }}

      - name: Sparse checkout selected date folder from source repo
        shell: bash
        run: |
          set -e
          YDATE='${{ steps.dates.outputs.date }}'
          echo "Fetching dumps for ${YDATE}"
          if [ -d "output/${YDATE}" ]; then
            echo "Already have cached dumps for ${YDATE}"
          else
            rm -rf tmp_wplace
            git clone --filter=blob:none --no-checkout https://github.com/ayamkv/wplace-surabaya.git tmp_wplace
            cd tmp_wplace
            git sparse-checkout init --cone
            git sparse-checkout set output/${YDATE}
            git checkout main || git checkout master || true
            cd ..
            mkdir -p output
            if [ -d "tmp_wplace/output/${YDATE}" ]; then
              rm -rf "output/${YDATE}"
              cp -r "tmp_wplace/output/${YDATE}" "output/${YDATE}"
              echo "found=true" >> $GITHUB_OUTPUT
            else
              echo "No dumps found for ${YDATE}"
              echo "found=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create timelapse
        id: make
        shell: bash
        env:
          SKIP_LATEST_COPY: "1"
          CRF: '15'
          PRESET: 'slow'
          PIX_FMT: 'yuv444p'
          EXTRA_FFMPEG: '-tune animation'
        run: |
          set -e
          if [ "${{ steps.dates.outputs.date }}" = "" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ ! -d "output/${{ steps.dates.outputs.date }}" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          python create_timelapse.py --date "${{ steps.dates.outputs.date }}"

      - name: Upload timelapse artifact
        if: steps.make.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: timelapse-${{ steps.dates.outputs.date }}
          path: timelapse/timelapse_${{ steps.dates.outputs.date }}.mp4
          if-no-files-found: error


