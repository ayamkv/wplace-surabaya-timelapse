#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ-—Ç–∞–π–º–ª–∞–ø—Å–∞ –∏–∑ –¥–∞–º–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ.
"""

import os
import glob
import logging
import sys
import argparse
from datetime import datetime, timedelta, timezone
from PIL import Image, ImageDraw
import cv2
import numpy as np
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
OUTPUT_DIR = "output"
TIMELAPSE_DIR = "timelapse"
VIDEO_WIDTH = 9000
VIDEO_HEIGHT = 9000
FPS = 9
BACKGROUND_COLOR = (255, 255, 255)  # –ë–µ–ª—ã–π —Ñ–æ–Ω
TOMSK_TZ = timezone(timedelta(hours=7))

def get_images_for_date(date_str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    
    Args:
        date_str (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    images = []
    
    date_folder = os.path.join(OUTPUT_DIR, date_str)
    if os.path.exists(date_folder):
        pattern = os.path.join(date_folder, "merged_tiles_*.png")
        folder_images = glob.glob(pattern)
        images.extend(folder_images)
        logger.info(f"–í –ø–∞–ø–∫–µ {date_str} –Ω–∞–π–¥–µ–Ω–æ {len(folder_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: merged_tiles_YYYYMMDD_HHMMSS.png
    def extract_timestamp_key(file_path):
        filename = os.path.basename(file_path)
        parts = filename.split('_')
        if len(parts) >= 4:
            date_part = parts[2]
            time_part = parts[3].split('.')[0]
            return f"{date_part}_{time_part}"
        return filename
    
    images.sort(key=extract_timestamp_key)
    
    logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ {date_str}")
    return images

def resize_image_to_fit(image, target_width, target_height, background_color=(255, 255, 255)):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –±–µ–ª—ã–π —Ñ–æ–Ω.
    
    Args:
        image (PIL.Image): –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        target_width (int): –¶–µ–ª–µ–≤–∞—è —à–∏—Ä–∏–Ω–∞
        target_height (int): –¶–µ–ª–µ–≤–∞—è –≤—ã—Å–æ—Ç–∞
        background_color (tuple): –¶–≤–µ—Ç —Ñ–æ–Ω–∞
        
    Returns:
        tuple: (PIL.Image, (x, y, new_width, new_height)) ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–∑–∏—Ü–∏—è/—Ä–∞–∑–º–µ—Ä –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º, –Ω–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
    img_width, img_height = image.size
    if img_width == target_width and img_height == target_height:
        return image, (0, 0, target_width, target_height)

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    img_width, img_height = image.size
    scale_w = target_width / img_width
    scale_h = target_height / img_height
    scale = min(scale_w, scale_h)
    
    # –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    new_width = int(img_width * scale)
    new_height = int(img_height * scale)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    resized_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
    result = Image.new('RGB', (target_width, target_height), background_color)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    x = (target_width - new_width) // 2
    y = (target_height - new_height) // 2
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    if resized_image.mode == 'RGBA':
        result.paste(resized_image, (x, y), resized_image)
    else:
        result.paste(resized_image, (x, y))
    
    return result, (x, y, new_width, new_height)

def add_timestamp_overlay(image, timestamp, font_size=36):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    
    Args:
        image (PIL.Image): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        timestamp (str): –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        font_size (int): –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        
    Returns:
        PIL.Image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    """
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º RGBA –¥–ª—è –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    base = image.convert('RGBA')
    overlay = Image.new('RGBA', base.size, (255, 255, 255, 0))
    draw = ImageDraw.Draw(overlay)

    # –í—ã—á–∏—Å–ª–∏–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–Ω–∏–∑—É
    # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è bbox (0,0), –∑–∞—Ç–µ–º –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é
    text_bbox = draw.textbbox((0, 0), timestamp)
    text_width = text_bbox[2] - text_bbox[0]
    text_height = text_bbox[3] - text_bbox[1]
    margin_x = 16
    margin_y = 12
    x = (image.width - text_width) // 2
    y = image.height - text_height - margin_y - 8

    # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π (—Å–ª–µ–≥–∫–∞) —Ç–µ–∫—Å—Ç —Å–æ stroke –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    draw.text((x, y), timestamp, fill=(255, 255, 255, 230), stroke_width=2, stroke_fill=(0, 0, 0, 160))

    # –ö–æ–º–ø–æ–∑–∏—Ç–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ RGB
    composed = Image.alpha_composite(base, overlay).convert('RGB')
    return composed

def create_timelapse_video(images, output_path):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ-—Ç–∞–π–º–ª–∞–ø—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    
    Args:
        images (list): –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not images:
        logger.error("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–ª–∞–ø—Å–∞")
        return False
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ writer
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        video_writer = cv2.VideoWriter(output_path, fourcc, FPS, (VIDEO_WIDTH, VIDEO_HEIGHT))
        
        logger.info(f"–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ —Å {len(images)} –∫–∞–¥—Ä–∞–º–∏, FPS: {FPS}")
        
        for i, image_path in enumerate(images):
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                pil_image = Image.open(image_path)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                filename = os.path.basename(image_path)
                # –§–æ—Ä–º–∞—Ç: merged_tiles_YYYYMMDD_HHMMSS.png
                parts = filename.split('_')
                if len(parts) >= 3:
                    date_part = parts[2]
                    time_part = parts[3].split('.')[0]
                    timestamp = f"{date_part[:4]}-{date_part[4:6]}-{date_part[6:8]} {time_part[:2]}:{time_part[2:4]}:{time_part[4:6]}"
                else:
                    timestamp = f"–ö–∞–¥—Ä {i+1}"
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –±–µ–ª—ã–π —Ñ–æ–Ω
                resized_image, placement = resize_image_to_fit(pil_image, VIDEO_WIDTH, VIDEO_HEIGHT, BACKGROUND_COLOR)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                final_image = add_timestamp_overlay(resized_image, timestamp)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
                opencv_image = cv2.cvtColor(np.array(final_image), cv2.COLOR_RGB2BGR)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–¥—Ä –≤ –≤–∏–¥–µ–æ
                video_writer.write(opencv_image)
                
                if (i + 1) % 10 == 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(images)} –∫–∞–¥—Ä–æ–≤")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
                continue
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º video writer
        video_writer.release()
        logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return False

def send_to_telegram(video_path, date_str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª –≤ Telegram –∫–∞–Ω–∞–ª.
    
    Args:
        video_path (str): –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
        date_str (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if not bot_token or not chat_id:
        logger.warning("Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram.")
        return False
    
    if not os.path.exists(video_path):
        logger.error(f"–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
        return False
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        date_obj = datetime.strptime(date_str, "%Y%m%d")
        formatted_date = date_obj.strftime("%d%m%Y")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        caption = f"""ü§ñ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç–∞–π–º–ª–∞–ø—Å –∑–∞ {formatted_date}

[üé¨ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã–º–∏ —Ç–∞–π–º–ª–∞–ø—Å–∞–º–∏](https://github.com/niklinque/wplace-tomsk-timelapse/)
[üì∏ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –¥–∞–º–ø–∞–º–∏](https://github.com/niklinque/wplace-tomsk/)"""
        
        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        url = f"https://api.telegram.org/bot{bot_token}/sendDocument"
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
        with open(video_path, 'rb') as video_file:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp4 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ —Ñ–∞–π–ª–∞
            filename = f"timelapse_{formatted_date}.mp4"
            files = {'document': (filename, video_file, 'application/octet-stream')}
            data = {
                'chat_id': chat_id,
                'caption': caption,
                'parse_mode': 'Markdown',
                'disable_content_type_detection': True
            }
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ Telegram –∫–∞–Ω–∞–ª: {video_path}")
            response = requests.post(url, files=files, data=data, timeout=300)
            
            if response.status_code == 200:
                logger.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –∫–∞–Ω–∞–ª")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {response.status_code}, {response.text}")
                return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

def parse_args():
    parser = argparse.ArgumentParser(description="–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ-—Ç–∞–π–º–ª–∞–ø—Å–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å")
    parser.add_argument("--date", dest="date_str", help="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤—á–µ—Ä–∞ (–¢–æ–º—Å–∫)")
    return parser.parse_args()

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–∞–π–º–ª–∞–ø—Å–æ–≤
    os.makedirs(TIMELAPSE_DIR, exist_ok=True)
    
    args = parse_args()
    if args.date_str:
        date_str = args.date_str
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É (—Ç–∞–∫ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç –æ–±—ã—á–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
        yesterday = datetime.now(TOMSK_TZ) - timedelta(days=1)
        date_str = yesterday.strftime("%Y%m%d")
    
    logger.info(f"–°–æ–∑–¥–∞—é —Ç–∞–π–º–ª–∞–ø—Å –∑–∞ {date_str}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å
    images = get_images_for_date(date_str)
    
    if not images:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ {date_str}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_filename = f"timelapse_{date_str}.mp4"
    output_path = os.path.join(TIMELAPSE_DIR, output_filename)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–ª–∞–ø—Å
    success = create_timelapse_video(images, output_path)
    
    if success:
        logger.info(f"–¢–∞–π–º–ª–∞–ø—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}")
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∞–π–º–ª–∞–ø—Å
        latest_path = os.path.join(TIMELAPSE_DIR, "latest.mp4")
        if os.path.exists(latest_path):
            os.remove(latest_path)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞–∫ latest.mp4
        import shutil
        shutil.copy2(output_path, latest_path)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è –∫–∞–∫: {latest_path}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ Telegram –∫–∞–Ω–∞–ª
        telegram_success = send_to_telegram(output_path, date_str)
        if telegram_success:
            logger.info("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ Telegram")

        return True
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–ª–∞–ø—Å")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
